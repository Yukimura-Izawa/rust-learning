//1から100までの数字を順番に表示する.ただし、3の倍数のときは数字の代わりに "Fizz" と表示.5の倍数のときは "Buzz" と表示.3と5の両方の倍数のときは "FizzBuzz" と表示
fn main() { 
    for n in 1..=100 {
        if n % 15 == 0 {
            println!("FizzBuzz");
        } else if n % 3 == 0 {
            println!("Fizz");
        } else if n % 5 == 0 {
            println!("Buzz");
        } else {
            println!("{}", n);
        }
    } 
}

//fn　:functionの略でこれから関数を定義するという意味
//main　:関数の名前, mainという名前は特別で、プログラムの「エントリーポイント（入り口）」として扱われる.プログラムを実行すると、必ずこのmain関数から処理が始まる.
//() :関数の引数を記述するところ.この場合は空白,main関数は引数を受け取らない関数ということと同義.
//{} :関数の本体(実際に行う処理)を囲むブロック.この波括弧{}の中に書かれたコードが,main関数が呼び出されたときに上から順に実行される.
//for :繰り返しを意味し,ループ処理開始の合図
//n :一時的な変数.範囲何の中から取り出された新しい数値がこのnに代入される.別にnである必要はない.
//1..=100 : 1から100までという範囲を表す.
//(補足 :rustの変数は不変なのになぜfor loopは作れるのか？→1周目が終わるときにnを破棄して、2周目で新しくn=2を定義している.だからnに色々な値を入れるのではなく,nごと新しい変数を100個作っている.)
//if :もし～なら～を実行するということ.ifの次は条件式がくる.今はn % 15 == 0.
//else if 条件式 {}: ifの使い方と似ている
//else {} :そうでないなら～を実施するということ.elseの後はもちろん条件式はない.elseは別にif分に必ず必要ではない.elseがなければ何も行わない.
//println! :コンソール（ターミナルやコマンドプロンプト）に文字を表示するための命令.lnはline(行)の意味.!はprintlnがマクロであることを示している.少し変わった関数くらいに思っておけばよい.
//(補足 :println!がマクロである一番の理由は,println!("{}", 1) のように引数が1つだったり,println!("{}, {}", 1, 2) のように引数が2つだったりと引数の数を自由に変えられるから.通常の関数ではこのような柔軟なことはできない.)
//(ex :{} の1番目に player, 2番目に score の値が入るprintln!("Player: {}, Score: {}", player, score);))